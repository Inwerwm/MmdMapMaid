<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>MmdMapMaid</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>MmdMapMaid</value>
  </data>
  <data name="Shell_Pmm.Content" xml:space="preserve">
    <value>PMM パス置き換え</value>
  </data>
  <data name="Shell_Emm.Content" xml:space="preserve">
    <value>EMM 材質並び替え</value>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>色テーマ</value>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="Button_ReadPmm.Content" xml:space="preserve">
    <value>PMM ファイルを読み込む</value>
  </data>
  <data name="Button_WritePmm.Content" xml:space="preserve">
    <value>PMM ファイルを書き込む</value>
  </data>
  <data name="Message_PmmWriteComplete" xml:space="preserve">
    <value>PMM ファイルの書き込みが完了しました</value>
  </data>
  <data name="Message_Writing" xml:space="preserve">
    <value>書き込み中です…</value>
  </data>
  <data name="Button_ReadDestinationPmx.Text" xml:space="preserve">
    <value>材質順変更後の PMX モデルを読み込む</value>
  </data>
  <data name="Button_ReadEmm.Content" xml:space="preserve">
    <value>EMM ファイルを読み込む</value>
  </data>
  <data name="Button_ReadSourcePmx.Text" xml:space="preserve">
    <value>材質順変更前の PMX モデルを読み込む</value>
  </data>
  <data name="Message_EmmWriteComplete" xml:space="preserve">
    <value>Emm ファイルの書き込みが完了しました</value>
  </data>
  <data name="Button_ReplaceAll.Content" xml:space="preserve">
    <value>すべて置換</value>
  </data>
  <data name="Label_ReplacementText.Text" xml:space="preserve">
    <value>置換文字列</value>
  </data>
  <data name="Label_SearchQueryText.Text" xml:space="preserve">
    <value>検索文字列</value>
  </data>
  <data name="Label_Search.Text" xml:space="preserve">
    <value>文字列置換</value>
  </data>
  <data name="DisplayName_Accessory" xml:space="preserve">
    <value>アクセサリー</value>
  </data>
  <data name="DisplayName_Model" xml:space="preserve">
    <value>モデル</value>
  </data>
  <data name="EmmOrderMapper_DestinationPmxPath.PlaceholderText" xml:space="preserve">
    <value>ここにドラッグ＆ドロップ</value>
  </data>
  <data name="EmmOrderMapper_EmmPath.PlaceholderText" xml:space="preserve">
    <value>ここにドラッグ＆ドロップ</value>
  </data>
  <data name="EmmOrderMapper_SourcePmxPath.PlaceholderText" xml:space="preserve">
    <value>ここにドラッグ＆ドロップ</value>
  </data>
  <data name="Shell_ExtractEmd.Content" xml:space="preserve">
    <value>EMD 抽出</value>
  </data>
  <data name="Button_SelectEmdSaveDirectory.Content" xml:space="preserve">
    <value>EMD 保存フォルダを選択</value>
  </data>
  <data name="Message_EmdWriteComplete" xml:space="preserve">
    <value>EMD ファイルの書き込みが完了しました</value>
  </data>
  <data name="DragAndDropPlaceHolder.Text" xml:space="preserve">
    <value>ここにドラッグ＆ドロップ</value>
  </data>
  <data name="Shell_ExtractVmd.Content" xml:space="preserve">
    <value>VMD 抽出</value>
  </data>
  <data name="Message_VmdWriteComplete" xml:space="preserve">
    <value>Vmd ファイルの書き込みが完了しました</value>
  </data>
  <data name="DragAndDropTextBox.PlaceholderText" xml:space="preserve">
    <value>ここにドラッグ&amp;ドロップ</value>
  </data>
  <data name="Button_SelectVmdSaveDirectory.Content" xml:space="preserve">
    <value>VMD 保存フォルダを選択</value>
  </data>
  <data name="Button_ExtractCamera.Content" xml:space="preserve">
    <value>カメラを抽出する</value>
  </data>
  <data name="Button_ExtractLight.Content" xml:space="preserve">
    <value>照明も一緒に抽出する</value>
  </data>
  <data name="Button_ExtractMorph.Content" xml:space="preserve">
    <value>モーフを抽出する</value>
  </data>
  <data name="Button_ExtractMotion.Content" xml:space="preserve">
    <value>モーションを抽出する</value>
  </data>
  <data name="Label_CameraMotion.Text" xml:space="preserve">
    <value>カメラモーション</value>
  </data>
  <data name="Label_EndFrame.Text" xml:space="preserve">
    <value>終了フレーム</value>
  </data>
  <data name="Label_EndFrameDescription_VmdExtractor.Text" xml:space="preserve">
    <value>終了フレーム &lt; 開始フレーム のときは最後まで抽出する</value>
  </data>
  <data name="VmdExtractor_Settings_Frames.Text" xml:space="preserve">
    <value>抽出範囲</value>
  </data>
  <data name="VmdExtractor_Settings_Models.Text" xml:space="preserve">
    <value>モデルモーション</value>
  </data>
  <data name="Label_StartFrame.Text" xml:space="preserve">
    <value>開始フレーム</value>
  </data>
  <data name="Label_Settings.Text" xml:space="preserve">
    <value>設定</value>
  </data>
  <data name="Shell_ReplaceVmd.Content" xml:space="preserve">
    <value>VMD 名前置き換え</value>
  </data>
  <data name="DisplayName_Morph" xml:space="preserve">
    <value>モーフ</value>
  </data>
  <data name="DisplayName_Motion" xml:space="preserve">
    <value>モーション</value>
  </data>
  <data name="Button_ReadVmd.Content" xml:space="preserve">
    <value>VMD ファイルを読み込む</value>
  </data>
  <data name="Button_WriteVmd.Content" xml:space="preserve">
    <value>VMD ファイルを書き込む</value>
  </data>
  <data name="Switch_WithEditEmm.OffContent" xml:space="preserve">
    <value>同名EMMファイルのオブジェクトは編集しない</value>
  </data>
  <data name="Switch_WithEditEmm.OnContent" xml:space="preserve">
    <value>同名EMMファイルのオブジェクトも編集する</value>
  </data>
  <data name="Shell_MotionLoop.Content" xml:space="preserve">
    <value>VMD モーションループ</value>
  </data>
  <data name="Button_Execute.Content" xml:space="preserve">
    <value>実行</value>
  </data>
  <data name="Label_Beat.Text" xml:space="preserve">
    <value>拍子</value>
  </data>
  <data name="Label_BeatDescription_MotionLoop.Text" xml:space="preserve">
    <value>4分の何拍子か</value>
  </data>
  <data name="Label_BPM.Text" xml:space="preserve">
    <value>BPM</value>
  </data>
  <data name="Label_Frequency.Text" xml:space="preserve">
    <value>周期</value>
  </data>
  <data name="Label_FrequencyDescription_MotionLoop.Text" xml:space="preserve">
    <value>何拍に一回設置するか</value>
  </data>
  <data name="Label_LoopCount.Text" xml:space="preserve">
    <value>ループ数</value>
  </data>
  <data name="Label_LoopCountDescription_MotionLoop.Text" xml:space="preserve">
    <value>設置ループの回数</value>
  </data>
  <data name="Label_PlotCount.Text" xml:space="preserve">
    <value>設置数</value>
  </data>
  <data name="Label_PlotCountOffset.Text" xml:space="preserve">
    <value>設置数増減</value>
  </data>
  <data name="Label_PlotCountOffsetDescription_MotionLoop.Text" xml:space="preserve">
    <value>設置数を直接増減させる</value>
  </data>
  <data name="Label_PlotInterval.Text" xml:space="preserve">
    <value>設置間隔</value>
  </data>
  <data name="Button_OpenDestinationFolder.Content" xml:space="preserve">
    <value>保存先フォルダを開く</value>
  </data>
  <data name="Switch_UseRegex.OffContent" xml:space="preserve">
    <value>文字列</value>
  </data>
  <data name="Switch_UseRegex.OnContent" xml:space="preserve">
    <value>正規表現</value>
  </data>
  <data name="Button_ResetAll.Content" xml:space="preserve">
    <value>全て取消</value>
  </data>
</root>